{-# LANGUAGE FlexibleInstances    #-}
{-# LANGUAGE NoImplicitPrelude    #-}
{-# LANGUAGE TemplateHaskell      #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# LANGUAGE UnicodeSyntax        #-}

module MonadError.IO.Error
  ( AsIOError(..), IOError -- hide constructor, to allow for upgrades, etc.,
  , (~~), ioeAdd
  , ioErr, ioError, isNoSuchThingError, isPermError
  , isInappropriateTypeError
  , mkIOErr
  , squashIOErrs, squashIOErrsB
  , squashInappropriateType, squashInappropriateTypeB, squashInappropriateTypeT
  , squashNoSuchThing, squashNoSuchThingT, squashNoSuchThingB, userE
  )
where

-- base --------------------------------

import qualified  System.IO.Error  as  SysIOError

import Control.Exception       ( Exception )
import Control.Exception.Base  ( IOException )
import Control.Monad.IO.Class  ( MonadIO, liftIO )
import Control.Monad           ( join, return )
import Data.Bool               ( Bool( False ) )
import Data.Either             ( Either( Left, Right ) )
import Data.Eq                 ( Eq( (==) ) )
import Data.Foldable           ( Foldable, any )
import Data.Function           ( ($), flip, id )
import Data.Functor            ( fmap )
import Data.Maybe              ( Maybe( Just, Nothing ), fromMaybe, maybe )
import Data.String             ( String )
import GHC.Stack               ( CallStack, HasCallStack, callStack )
import System.IO               ( FilePath, Handle )
import System.IO.Error         ( ioeGetErrorType, ioeGetFileName, ioeGetHandle
                               , ioeGetLocation, mkIOError, userError )
import Text.Show               ( Show( show ) )

-- base-unicode-symbols ----------------

import Data.Function.Unicode  ( (‚àò) )

-- data-textual ------------------------

import Data.Textual  ( Printable( print ) )

-- has-callstack -----------------------

import HasCallstack  ( HasCallstack( callstack ) )

-- lens --------------------------------

import Control.Lens.Fold     ( has )
import Control.Lens.Getter   ( to )
import Control.Lens.Lens     ( lens )
import Control.Lens.Prism    ( Prism', prism' )
import Control.Lens.Review   ( (#) )
import System.IO.Error.Lens  ( _NoSuchThing, _InappropriateType
                             , _PermissionDenied )

-- mtl ---------------------------------

import Control.Monad.Except  ( ExceptT, MonadError, throwError )

-- more-unicode ------------------------

import Data.MoreUnicode.Bool  ( ùîπ )
import Data.MoreUnicode.Lens  ( (‚©º) )

-- text-printer ------------------------

import qualified  Text.Printer  as  P

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import MonadError  ( splitMError )

-------------------------------------------------------------------------------

data IOError = IOErr { unErr ‚à∑ IOException, _callstack ‚à∑ CallStack }
  deriving Show

instance HasCallstack IOError where
  callstack = lens _callstack (\ ioe cs ‚Üí ioe { _callstack = cs })

instance Eq IOError where
  (IOErr e _) == (IOErr e' _) = e == e'

--instance Show IOError where
--  show (IOErr e cs) = show e ‚äï show cs

instance Exception IOError

instance Printable IOError where
  print = P.string ‚àò show ‚àò unErr

ioErr ‚à∑ HasCallStack ‚áí IOException ‚Üí IOError
ioErr e = IOErr e callStack

mkIOErr ‚à∑ IOException ‚Üí CallStack ‚Üí IOError
mkIOErr = IOErr

------------------------------------------------------------

class AsIOError e where
  _IOError ‚à∑ HasCallStack ‚áí Prism' e IOError
  _IOErr   ‚à∑ HasCallStack ‚áí Prism' e IOException
  _IOErr   = _IOError ‚àò _IOErr

instance AsIOError IOError where
  _IOError = id
  _IOErr   = prism' ioErr (Just ‚àò unErr)

----------------------------------------

userE ‚à∑ (AsIOError Œµ, HasCallStack) ‚áí String ‚Üí Œµ
userE = (_IOErr #) ‚àò userError

----------------------------------------

{- | raise an IOError in the IO Monad -}
ioError ‚à∑ MonadIO Œº ‚áí IOError ‚Üí Œº Œ±
ioError = liftIO ‚àò SysIOError.ioError ‚àò unErr

----------------------------------------

{- | Is a given IOError a NoSuchThing (DoesNotExist)? -}
isNoSuchThingError ‚à∑ AsIOError Œµ ‚áí Œµ ‚Üí Bool
isNoSuchThingError = has (_IOErr ‚àò to ioeGetErrorType ‚àò _NoSuchThing)

----------------------------------------

{- | Is a given IOError a PermissionDenied? -}
isPermError ‚à∑ AsIOError Œµ ‚áí Œµ ‚Üí Bool
isPermError = has (_IOErr ‚àò to ioeGetErrorType ‚àò _PermissionDenied)

----------------------------------------

{- | Given a `Foldable` of predicates that identify types of `IOError`, convert
     a possible IOError to a `MonadError` (for errors that have no matching
     predicate), a `Nothing` (for errors that do have a matching predicate) or a
     value (for non-errors).
-}
squashIOErrs ‚à∑ (AsIOError Œµ, MonadError Œµ Œº, Foldable œÜ) ‚áí
               œÜ (IOError ‚Üí Bool) ‚Üí Either Œµ Œ± ‚Üí Œº (Maybe Œ±)
squashIOErrs ls (Left e) | maybe False (\ ps ‚Üí any ($ ps) ls) (e ‚©º _IOError)
                                                              =  return Nothing
squashIOErrs _  (Left e)                                      =  throwError e
squashIOErrs _  (Right r)                                     =  return $ Just r

----------------------------------------

{- | Specialization of `squashIOErrs` to Bool; sending the positively identified
     errors to False. -}
squashIOErrsB ‚à∑ (AsIOError Œµ, MonadError Œµ Œº, Foldable œÜ) ‚áí
                œÜ (IOError ‚Üí Bool) ‚Üí Either Œµ Bool ‚Üí Œº Bool
squashIOErrsB f = fmap (maybe False id) ‚àò squashIOErrs f

{- | Given an Either IOError Œ± (typically, a MonadError IOError Œº ‚áí Œº Œ±),
     convert a 'NoSuchThing' error (e.g., DoesNotExist) to a Nothing of Maybe Œ±.
 -}
squashNoSuchThing ‚à∑ (AsIOError Œµ, MonadError Œµ Œº) ‚áí Either Œµ Œ± ‚Üí Œº (Maybe Œ±)
squashNoSuchThing = squashIOErrs [isNoSuchThingError]

{- | `squashNoSuchThing` for `ExceptT` -}
squashNoSuchThingT ‚à∑ (AsIOError Œµ, MonadError Œµ Œº) ‚áí ExceptT Œµ Œº Œ± ‚Üí Œº (Maybe Œ±)
squashNoSuchThingT = join ‚àò fmap squashNoSuchThing ‚àò splitMError

{- | `squashNoSuchThing` specialized to `Bool` (akin to `squashIOErrsB` -}
squashNoSuchThingB ‚à∑ (AsIOError Œµ, MonadError Œµ Œº) ‚áí Either Œµ Bool ‚Üí Œº Bool
squashNoSuchThingB = squashIOErrsB [isNoSuchThingError]

----------------------------------------

{- | Is a given IOError a NoSuchThing (DoesNotExist)? -}
isInappropriateTypeError ‚à∑ AsIOError Œµ ‚áí Œµ ‚Üí ùîπ
isInappropriateTypeError =
  has (_IOErr ‚àò to ioeGetErrorType ‚àò _InappropriateType )

{- | Given an Either IOError Œ± (typically, a MonadError IOError Œº ‚áí Œº Œ±),
     convert an 'InappropriateType' error to a Nothing of Maybe Œ±.
 -}
squashInappropriateType ‚à∑ (AsIOError Œµ, MonadError Œµ Œº) ‚áí
                          Either Œµ Œ± ‚Üí Œº (Maybe Œ±)
squashInappropriateType = squashIOErrs [isInappropriateTypeError]

{- | `squashInappropriateType` for `ExceptT` -}
squashInappropriateTypeT ‚à∑ (AsIOError Œµ, MonadError Œµ Œº) ‚áí
                           ExceptT Œµ Œº Œ± ‚Üí Œº (Maybe Œ±)
squashInappropriateTypeT = join ‚àò fmap squashInappropriateType ‚àò splitMError

{- | `squashInappropriateType` specialized to `ùîπ` (akin to `squashIOErrsB` -}
squashInappropriateTypeB ‚à∑ (AsIOError Œµ, MonadError Œµ Œº) ‚áí Either Œµ ùîπ ‚Üí Œº ùîπ
squashInappropriateTypeB = squashIOErrsB [isInappropriateTypeError]

----------------------------------------

class IOEAddable Œ± where
  {- | Provide a default value for one of IOError's attributes; e.g., its
       filename or handle -}
  ioeAdd ‚à∑ AsIOError Œµ ‚áí Œ± ‚Üí IOError ‚Üí Œµ
  (~~) ‚à∑ AsIOError Œµ ‚áí IOError ‚Üí Œ± ‚Üí Œµ
  (~~) = flip ioeAdd

instance IOEAddable FilePath where
  ioeAdd f (IOErr e cs) =
    let e' = mkIOError (ioeGetErrorType e) (ioeGetLocation e)
                       (ioeGetHandle e) (Just $ fromMaybe f (ioeGetFileName e))
     in _IOError # IOErr e' cs

instance IOEAddable Handle where
  ioeAdd h (IOErr e cs) =
    let e' = mkIOError (ioeGetErrorType e) (ioeGetLocation e)
                       (Just $ fromMaybe h (ioeGetHandle e)) (ioeGetFileName e)
     in _IOError # IOErr e' cs


-- that's all, folks! ----------------------------------------------------------
