module MonadError.IO
  ( ”ù
  , asIOError, asIOErrorT, asIOErrorY, eitherIOThrow, eitherIOThrowT
  , hoistMonadIOError, ioMonadErr, ioMonadError, ioThrow, __monadIOError__
  , wrapAsIOErr, wrapIOErr
  )
where

import Base0

-- base --------------------------------

import qualified  System.IO.Error

import Control.Exception.Base  ( IOException, throwIO )
import System.IO.Error         ( catchIOError, userError )

-- more-unicode ------------------------

import Data.MoreUnicode.Either   ( ùîº )
import Data.MoreUnicode.Functor  ( (‚ä≥) )
import Data.MoreUnicode.Maybe    ( ùïÑ )
import Data.MoreUnicode.Monad    ( (‚â´) )

-- mtl ---------------------------------

import Control.Monad.Except  ( runExceptT )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import MonadError.IO.Error  ( AsIOError, IOError, _IOErr, squashNoSuchThing )
import MonadError           ( mapMError, splitMError )

-------------------------------------------------------------------------------

{- | Perform some `IO`, catching any `IOError`s into a `MonadError`. -}
ioMonadError ‚à∑ (MonadIO Œº, MonadError IOException Œ∑, HasCallStack) ‚áí
               IO Œ± ‚Üí Œº (Œ∑ Œ±)
ioMonadError io = liftIO $ catchIOError (return ‚ä≥ io) (return ‚àò throwError)

----------------------------------------

{- | Hoist an IO (Either IOException Œ±) to `MonadError`/`MonadIO`. -}
hoistMonadIOError ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack)
                  ‚áí IO (ùîº IOException Œ±) ‚Üí Œº Œ±
hoistMonadIOError eio = liftIO eio ‚â´ mapMError (_IOErr #)

----------------------------------------

{- | Perform some `IO`, catching any `IOError`s into a `MonadError` (in a
     `MonadIO`) -}
asIOError ‚à∑ (AsIOError Œµ, MonadIO Œº, MonadError Œµ Œº, HasCallStack) ‚áí IO Œ± ‚Üí Œº Œ±
asIOError = hoistMonadIOError ‚àò ioMonadError

----------------------------------------

{- | Take some IO action, in a context which has other exceptions; catch any IO
     exceptions, and `join` them with the context exceptions. -}
asIOErrorT ‚à∑ (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack) ‚áí
             ExceptT Œµ IO Œ± ‚Üí Œº Œ±
asIOErrorT = join ‚àò asIOError ‚àò splitMError

----------------------------------------

{- | Perform some `IO`, catching any `IOError`s into a `MonadError` (in a
     `MonadIO`); BUT any 'NoSuchThing' error (e.g., DoesNotExist) will be
     converted to `Nothing`. -}
asIOErrorY ‚à∑ ‚àÄ Œ± Œµ Œº . (MonadIO Œº, AsIOError Œµ, MonadError Œµ Œº, HasCallStack) ‚áí
            IO Œ± -> Œº (ùïÑ Œ±)

asIOErrorY = join ‚àò fmap squashNoSuchThing ‚àò splitMError ‚àò asIOError

----------------------------------------

{- | `asIOError` specialized to `IOError` -}
{-# DEPRECATED ioMonadErr "use `asIOError @IOError`" #-}
ioMonadErr ‚à∑ (MonadIO Œº, MonadError IOError Œº, HasCallStack) ‚áí IO Œ± ‚Üí Œº Œ±
ioMonadErr = asIOError

----------------------------------------

_wrapIOErr ‚à∑ (MonadError Œµ Œº, HasCallStack) ‚áí
             (Œπ ‚Üí Œµ) ‚Üí (Œ≤ ‚Üí ExceptT Œπ Œº Œ±) ‚Üí Œ≤ ‚Üí Œº Œ±
_wrapIOErr f g =
  join ‚àò fmap (either throwError return) ‚àò fmap (first f) ‚àò splitMError ‚àò g

----------------------------------------

{- | Take an IO Action, convert it to a MonadError-function, wrapping any
     `AsIOError` with a custom type -}
wrapAsIOErr ‚à∑ (MonadIO Œº, AsIOError Œπ, MonadError Œµ Œº, HasCallStack) ‚áí
              (Œπ ‚Üí Œµ) ‚Üí IO Œ± ‚Üí Œº Œ±
wrapAsIOErr f = _wrapIOErr f asIOError

----------------------------------------

{- | Take an IO Action, convert it to a MonadError-function, wrapping any
     `IOError` with a custom type.
 -}
{-# DEPRECATED wrapIOErr "use `wrapAsIOErr @IOError` instead" #-}
wrapIOErr ‚à∑ (MonadIO Œº, MonadError Œµ Œº, HasCallStack) ‚áí
            (IOError ‚Üí Œµ) ‚Üí IO Œ± ‚Üí Œº Œ±
wrapIOErr f = _wrapIOErr f ioMonadErr

----------------------------------------

{- | Turn an `Exception` into an `IOError` within IO. -}
__monadIOError__ ‚à∑ ‚àÄ Œµ Œº Œ± . (MonadIO Œº, Exception Œµ, HasCallStack) ‚áí
                   ExceptT Œµ IO Œ± ‚Üí Œº Œ±
__monadIOError__ io = liftIO $ splitMError io ‚â´ either throwIO return

{- | Unicode alias for __monadIOError__ -}
”ù ‚à∑ (MonadIO Œº, Exception Œµ, HasCallStack) ‚áí ExceptT Œµ IO Œ± ‚Üí Œº Œ±
”ù = __monadIOError__

----------------------------------------

{- | Throw a `Printable` as a user error in `IO`. -}
ioThrow ‚à∑ (MonadIO Œº, Printable œÑ, HasCallStack) ‚áí œÑ ‚Üí Œº Œ±
ioThrow = liftIO ‚àò System.IO.Error.ioError ‚àò System.IO.Error.userError ‚àò toString

{- | Convert a left value to an `IOException`. -}
eitherIOThrow ‚à∑ (Show e, MonadIO Œº, HasCallStack) ‚áí ùîº e a ‚Üí Œº a
eitherIOThrow =
  either (liftIO ‚àò System.IO.Error.ioError ‚àò userError ‚àò show) return

{- | Convert a MonadError into a `userError` in `IO`. -}
eitherIOThrowT ‚à∑ (MonadIO Œº, Show Œµ, HasCallStack) ‚áí ExceptT Œµ Œº Œ± ‚Üí Œº Œ±
eitherIOThrowT f = runExceptT f ‚â´ eitherIOThrow

-- that's all, folks! ---------------------------------------------------------
